<div id="map">
  <pre id='coordinates' class='ui-coordinates'></pre>
</div>
<script>

// Initialize the map.
L.mapbox.accessToken = "<%= Rails.application.secrets.mapbox_token %>";
var map = L.mapbox.map("map", "mapbox.streets");

// Initialize the geocoder control and add it to the map
var geocoderControl = L.mapbox.geocoderControl("mapbox.places", {
  position: "topright",
  keepOpen: false
  });
geocoderControl.addTo(map);

// Initialize the draggable map marker and add it to the map
var marker = L.marker([0, 0], {
  icon: L.mapbox.marker.icon({"marker-color": "#f86767"}),
  draggable: true
  });
marker.addTo(map);

// Update map view and marker position to include previously saved coordinates
saved_coords = {lat: $("#placemark_lat").val(), lng: $('#placemark_lng').val()}
console.log(saved_coords)
if(typeof saved_coords.lat !== 'undefined' && typeof saved_coords.lng !== 'undefined') {
   marker.setLatLng({lat: saved_coords.lat, lng: saved_coords.lng});
   map.setView([saved_coords.lat, saved_coords.lng], 13);
 };

// Listen for the geocoder's "found" result, and move the map marker to the first result's coordinates
geocoderControl.on("found", function(res) {
  map_center_coords = res.results.features[0].center
  marker.setLatLng({lat: map_center_coords[1], lng: map_center_coords[0]});
  get_marker_position();
});

// When the map marker is dragged, update the hidden lat/lon form fields and the coordinate inset
marker.on("dragend", get_marker_position);
// Set the the hidden lat/lon form fields to the map marker's coordinates, and the coordinate inset.
function get_marker_position() {
  var m = marker.getLatLng();
  $("#placemark_lat").val(m.lat);
  $("#placemark_lng").val(m.lng);
  coordinates.innerHTML = "Coordinates:<br />Lat: " + Number((m.lat).toFixed(3)) + "<br />Lon: " + Number((m.lng).toFixed(3));
}

// Set the initial map marker position on load.
get_marker_position();
</script>